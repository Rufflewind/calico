#!/usr/bin/env python
import argparse, re, subprocess, sys
import numpy as np

def parse_kvs(s):
    d = {}
    ks = []
    for line in s.split("\n"):
        if line.startswith("#") or "=" not in line:
            continue
        k, v = line.split("=", 1)
        ks.append(k)
        d[k.strip()] = v.strip()
    return d, ks

def format_table(alignments, table):
    num_cols = len(table[0])
    max_widths = [0] * num_cols
    for row in table:
        for i, value in enumerate(row):
            max_widths[i] = max(max_widths[i], len(value))
    return "".join(
        "".join(
            format(value, alignment + str(max_width))
            for alignment, max_width, value in
            zip(alignments, max_widths, row)
        ) + "\n"
        for row in table
    )

def get_stats(name, ts):
    mean = np.mean(ts) * 1e9
    std = np.std(ts) * 1e9
    sdom = std / len(ts) ** .5
    return (mean, sdom, std)

p = argparse.ArgumentParser()
p.add_argument("-n", default=4,
               help="number of times to run the program; default: 4")
p.add_argument("command", metavar="arg", nargs="*", default=["./a.out"],
               help="benchmark program to execute; default: ./a.out")
args = p.parse_args()

times = {}
for i in range(int(args.n)):
    d, ks = parse_kvs(subprocess.check_output(args.command).decode("utf-8"))
    names = []
    for key in ks:
        m = re.match("time_(.*)", key)
        if not m:
            continue
        name = m.group(1)
        names.append(name)
        try:
            ts = times[name]
        except KeyError:
            ts = []
            times[name] = ts
        ts.append(float(d[key]))
if not times:
    raise Exception("didn't find any timings from output of {0}"
                    .format(args.command))

sys.stdout.write(format_table(
    ["<", "<", ">", "<", ">", "<", ">", "<"],
    [(
        name,
        " = ",
        format(mean, ".1f"),
        " +/- ",
        format(sdom, ".1f"),
        " ns; std = ",
        format(std, ".1f"),
        " ns",
    ) for name, (mean, sdom, std) in
    ((name, get_stats(name, times[name])) for name in names)],
))
sys.stdout.flush()
