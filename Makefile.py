import os, re, runpy, subprocess, sys
from makegen import *
sys.path.insert(0, "tools")
import utils

def make_preprocess_rules(fns):
    for fn in fns:
        m = re.match("(.*?)\.gen\.py$", fn)
        if not m:
            continue
        out_fn, = m.groups()
        deps = [snormpath(os.path.join(os.path.dirname(fn), x))
                for x in runpy.run_path(fn)["__deps__"]]
        deps.insert(0, fn)
        yield simple_command(
            [
                "tools/run-generator >$@.tmp {fn}".format(**locals()),
                "mv $@.tmp $@",
            ],
            out_fn,
            deps,
            no_format=True,
        )

def get_dependencies(fn):
    with open(fn) as f:
        for line in f:
            m = re.match(r'\s*#\s*include\s*"([^"]*)"', line)
            if not m:
                continue
            yield snormpath(os.path.join(os.path.dirname(fn),
                                         m.group(1)))

def make_copy_header_rules(fns, extensions, prefix=""):
    for fn in fns:
        name, ext = os.path.splitext(os.path.basename(fn))
        if ext not in extensions:
            continue
        pp = utils.Preprocessor(fn)
        pp.preprocess()
        if not pp.attributes.get("public", False):
            continue
        relpath, = re.match("src/(.*)$", fn).groups()
        out_fn = "include/" + prefix + fn
        yield simple_command(
            "cp {fn} $@".format(**locals()),
            out_fn,
            [fn],
        )
        if "_g." not in fn:
            deps = tuple(get_dependencies(fn))
            yield Ruleset(
                default_target=fn,
                rules={fn: (frozenset(deps), ())},
            )

def make_run_test_rule(program_ruleset):
    return simple_command("valgrind $(VALGRINDFLAGS) {0}",
        "run-" + os.path.basename(program_ruleset.default_target),
        [program_ruleset], phony=True)

def make_test_rules(fns, extensions, root):
    for fn in fns:
        name, ext = os.path.splitext(os.path.basename(fn))
        if ext not in extensions:
            continue
        m = re.match("(.*?)_test$", name)
        if not m:
            continue
        out_name, = m.groups()
        dn = os.path.dirname(fn)
        pp = utils.Preprocessor(fn)
        pp.preprocess()
        src_fns = [fn] + [snormpath(os.path.join(dn, bn))
                          for bn in pp.attributes["deps"]]
        test_name = snormpath(os.path.join(
            os.path.relpath(dn, root),
            out_name
        )).replace("/", "-")
        if ext == ".cpp":
            test_name += "++"
        check_rule = make_run_test_rule(build_program("tmp/test-" + test_name, [
            compile_source(
                src_fn,
                extra_flags=("$(TESTCPPFLAGS) " +
                             ("$(TESTCXXFLAGS)"
                              if src_fn.endswith(".cpp")
                              else "$(TESTCFLAGS)")),
                suffix="",
                extension_suffix=True,
            ) for src_fn in src_fns
        ]))
        bench_rule = None
        if pp.attributes.get("bench", False):
            bench_rule = build_program("tmp/bench-" + test_name, [
                compile_source(
                    src_fn,
                    extra_flags=("$(BENCHCPPFLAGS) " +
                                 ("$(BENCHCXXFLAGS)"
                                  if src_fn.endswith(".cpp")
                                  else "$(BENCHCFLAGS)")),
                    suffix="_bench",
                    extension_suffix=True,
                ) for src_fn in src_fns
            ])
        yield check_rule, bench_rule

def make_deploy_doc_rule(doc_dir, doc_rule, branch="origin"):
    return simple_command(
            "[ -d {0}/.git ] || ( "
                "url=`git remote -v | grep {1} | "
                    "awk '{{ printf \"%s\", $$2; exit }}'` &&"
                "mkdir -p {0} && "
                "cd {0} && "
                "git init && "
                "git config user.name Bot && "
                "git config user.email '<>' && "
                "git commit -m _ --allow-empty && "
                'git remote add origin "$$url" '
            ") && "
            "cd {0} && "
            "git add -A && "
            "git commit --amend -q -m Autogenerated && "
            "git push -f origin master:gh-pages"
        .format(doc_dir, branch),
        "deploy-doc",
        [doc_rule],
        phony=True,
        no_format=True)

root = "src"

srcs = list(utils.get_all_files(root))

pp_rules = list(make_preprocess_rules(srcs))

test_rules = list(make_test_rules(srcs, [".c", ".cpp"], root))

build_rule = alias("build", list(
    make_copy_header_rules(srcs, [".h", ".hpp"], prefix="calico/")))

build_bench_rule = alias("build-bench", [x[1] for x in test_rules
                                         if x[1] is not None])

check_rule = alias("check", [x[0] for x in test_rules])

doc_rule = simple_command([
    "rm -fr tmp/doc-src",
    "mkdir -p tmp",
    "cp -r include tmp/doc-src/",
    "mv tmp/doc-src/btree_impl.h tmp/doc-src/btree_template.h",
    "tools/generate-doxygen-mainpage <README.md >tmp/doc-src/README.md",
    "doxygen",
], "doc", [build_rule], phony=True)

alias("all", [
    build_rule,
    build_bench_rule,
]).merge(
    check_rule,
    doc_rule,
    make_deploy_doc_rule("doc/html", doc_rule),
    Ruleset(macros={
        "BENCHCPPFLAGS": "-g -Wall -O3 -DBENCH -DNDEBUG",
        "TESTCPPFLAGS": ("-g -Wall -Wextra -Wconversion -pedantic "
                         "-D_POSIX_C_SOURCE=199309L"),
        "TESTCFLAGS": "-std=c99",
        "TESTCXXFLAGS": "-std=c++11",
    }),
    *pp_rules
).save()
